selArgs <- c(selArgs, paste("-log", shQuote(logFILE)))
}
selArgs <- c(javaargs, selArgs, args)
userArgs <- list(...)
if (.Platform$OS.type == "unix") {
initArgs <- list(command = "java", args = selArgs, wait = FALSE,
stdout = FALSE, stderr = FALSE)
}
else {
initArgs <- list(command = "java",args = selArgs, wait = FALSE,
invisible = TRUE)
}
initArgs[names(userArgs)] <- userArgs
do.call(system2, initArgs)
if (.Platform$OS.type == "windows"){
wmicOut <- tryCatch({
system2("wmic",
args = c("path win32_process get Caption,Processid,Commandline"
, "/format:htable")
, stdout=TRUE, stderr=NULL)
}, error = function(e)e)
selPID <- if(inherits(wmicOut, "error")){
wmicArgs <- paste0(c("path win32_process where \"commandline like '%",
selFILE, "%'\" get Processid"))
wmicOut <- system2("wmic",
args = wmicArgs
, stdout = TRUE)
as.integer(gsub("\r", "", wmicOut[2]))
}else{
wmicOut <- readHTMLTable(htmlParse(wmicOut), header = TRUE,
stringsAsFactors = FALSE)[[1]]
wmicOut[["ProcessId"]] <- as.integer(wmicOut[["ProcessId"]])
idx <- grepl(selFILE, wmicOut$CommandLine)
if(!any(idx)) stop("Selenium binary error: Unable to start Selenium
binary. Check if java is installed.")
wmicOut[idx,"ProcessId"]
}
}else{
if(Sys.info()["sysname"] == "Darwin"){
sPids <- system('ps -Ao"pid"', intern = TRUE)
sArgs <- system('ps -Ao"args"', intern = TRUE)
}else{
sPids <- system('ps -Ao"%p"', intern = TRUE)
sArgs <- system('ps -Ao"%a"', intern = TRUE)
}
idx <- grepl(selFILE, sArgs)
if(!any(idx)) stop("Selenium binary error: Unable to start Selenium
binary. Check if java is installed.")
selPID <- as.integer(sPids[idx])
}
list(
stop = function(){
tools::pskill(selPID)
},
getPID = function(){
return(selPID)
}
)
}
startServer()
checkForServer <- function (dir = NULL, update = FALSE, rename = TRUE,
beta = FALSE)
{
selURL <- "http://selenium-release.storage.googleapis.com"
selXML <- xmlParse(paste0(selURL), "/?delimiter=")
selJAR <-
xpathSApply(selXML,
"//s:Key[contains(text(),'selenium-server-standalone')]",
namespaces = c(s = "http://doc.s3.amazonaws.com/2006-03-01"),
xmlValue
)
# get the most up-to-date jar
selJAR <- if(!beta){
grep("^.*-([0-9\\.]*)\\.jar$", selJAR, value = TRUE)
}else{
selJAR
}
selJARdownload <- selJAR[order(gsub(".*-(.*).jar$", "\\1", selJAR),
decreasing = TRUE)][1]
selDIR <- ifelse(is.null(dir), file.path(find.package("RSelenium"),
"bin"), dir)
selFILE <- if(rename){
file.path(selDIR, "selenium-server-standalone.jar")
}else{
file.path(selDIR, gsub(".*(selenium-server-standalone.*)", "\\1",
selJARdownload))
}
if (update || !file.exists(selFILE)) {
dir.create(selDIR, showWarnings=FALSE)
message("DOWNLOADING STANDALONE SELENIUM SERVER. THIS MAY TAKE
SEVERAL MINUTES")
download.file(paste0( selURL, "/", selJARdownload), selFILE,
mode = "wb")
}
}
checkForServer()
startServer()
remDr <- remoteDriver()
remDr$open()
remDr$navigate(appURL)
remDr$open()
library(RSelenium)
rD <- rsDriver()
vignette("RSelenium-docker", package = "RSelenium")
remDr <- remoteDriver(remoteServerAddr = "localhost"
, port = 4445L
, browserName = "firefox"
)
remDr$open()
remDr$navigate(appURL)
appURL <- 'http://fetlife.com/users/sign_in'
remDr$navigate(appURL)
remDr$findElement("id", "user_login")$sendKeysToElement(list("arch21rosa@gmail.com"))
remDr$findElement("id", "user_password")$sendKeysToElement(list("Blink182"))
remDr$findElement("css", ".a-button.a-button--primary input[type='submit']")$clickElement()
remDr$findElement("css", ".a-button.a-button--primary")$clickElement()
readHTMLTable?
?readHTMLTable?
?readHTMLTable
appURL <- 'https://fetlife.com/cities/11529/kinksters?page=2'
remDr$navigate(appURL)
library(XML)
library(xml2)
read_html(appURL)
htmlTreeParse(appURL)
remDr$getPageSource()
test <- remDr$getPageSource()
htmlTreeParse(test)
htmlParse(test)
html_structure(test)
htmlParse(remDr$getCurrentUrl())
remDr$getCurrentUrl()
test
class(test)
install.packages('rvest')
tableElem<- remDr$findElement("class", "fl-member-card__user")
res <- htmlTreeParse(tableElem$getElementAttribute("outerHTML")
)
elem <- tableElem$getElementAttribute("outerHTML")
elem
tableElem<- remDr$findElements("class", "fl-member-card__user")
elem <- tableElem$getElementAttribute("outerHTML")
tableElem
tableElem<- remDr$findElement("class", "fl-member-card__user")
tableElem
tableElem<- remDr$findElements("class", "fl-member-card__user")
tableElem<- remDr$findElement("class", "fl-member-card__user")
tableElem<- remDr$findElement("class", "fl-overflow--hidden fl-margin--b-l")
tableElem<- remDr$findElement("class", "fl-overflow--hidden.fl-margin--b-l")
tableElem<- remDr$findElement("class", "fl-overflow--hidden")
elem <- tableElem$getElementAttribute("outerHTML")
elem
res <- htmlTreeParse(elem, useInternalNodes=T)
res <- htmlTreeParse(file = elem, useInternalNodes=T)
elem2 <- unlist(elem)
res <- htmlTreeParse(file = elem2, useInternalNodes=T)
res
remDr$close()
res
res$children
xpathSApply(res, "//*/span[@class='fl-member-card__info']", xmlValue)
xpathSApply(res, "//*/span[@class='fl-flag__body']", xmlValue)
xpathSApply(res, "//*/a[@class='fl-flag__body']", xmlValue)
xpathSApply(res, "//*/div[@class='fl-flag__body']", xmlValue)
results <- xpathSApply(res, "//*/div[@class='fl-flag__body']", xmlValue)
content <- as.data.frame(matrix(results, ncol = 4, byrow = TRUE))
View(content)
results[1]
results[[1]]
results$1
results[1]
class(results[1])
results <- xpathSApply(res, "//*/a[@class='fl-member-card__user']/*/text()", xmlValue)
results
results <- xpathSApply(res, "//*/a[@class='fl-member-card__user']/text()", xmlValue)
results
results2 <- xpathSApply(res, "//*/span[@class='fl-member-card__info']/text()", xmlValue)
results2 <- xpathSApply(res, "//*/span[@class='fl-member-card__info'][1]/text()", xmlValue)
results2 <- xpathSApply(res, "//*/span[@class='fl-member-card__info']/text()", xmlValue)
results2 <- xpathSApply(res, "//*/span[@class='fl-member-card__info']/text()[1]", xmlValue)
results2 <- xpathSApply(res, "//*/span[@class='fl-member-card__info']/text()", xmlValue)
results2
results2[1]
content <- as.data.frame(matrix(results2, ncol = 1, byrow = TRUE))
View(content)
results3 <- xpathSApply(res, "//*/span[@class='fl-member-card__location']/text()", xmlValue)
results3[1]
results1[1]
results[1]
content2 <- as.data.frame(matrix(results3, ncol = 1, byrow = TRUE))
View(content2)
as.data.frame(results)
df <- cbind(as.data.frame(results), results2, results3)
View(df)
grep('[:alnum:]', content)
grep('[:alnum:]', df$results2)
grep('[:digits:]', df$results2)
grep('[:digits:]', df$results2[1])
grep('[:alnum:]', df$results2[1])
df$results2[1]
df$results2[2]
df$results2[[1]]
df$results2[1,1]
df$results2[1][1]
class(df$results2[1])
as.character(df$results2[1])
as.character(df$results2[1])[1]
unlist(df$results2[1])
as.character(df$results2[1])[1]
strsplit(as.character(df$results2[1]), "\n")
unlist(strsplit(as.character(df$results2[1]), "\n"))
unlist(strsplit(as.character(df$results2[1]), "\n"))[2]
unlist(strsplit(as.character(df$results2[1]), "\n"))[3]
unlist(strsplit(as.character(df$results2), "\n"))
temp <- unlist(strsplit(as.character(df$results2), "\n"))
temp
temp[1]
temp[1]2
strsplit(df$results2)
strsplit(df$results2, "\n")
strsplit(df$results2, "")
strsplit(df$results2, " ")
library(tidyr)
separate(df, results2)
separate(df, df$results2)
col(df)
colnames(df)
separate(df, df$results2)
separate(df, as.character(df$results2))
df$results2 <- as.character(df$results2)
separate(df, df$results2)
separate(df, results2)
separate(df, results2, c("Age", "Sex")))
separate(df, results2, c("Age", "Sex"))
library(stringr)
str_extract_all(df$results2[1], "\\(?[0-9,.]+\\)?")
str_extract_all(df$results2, "\\(?[0-9,.]+\\)?")
ages <- str_extract_all(df$results2[1], "\\(?[0-9,.]+\\)?")
ages[1]
ages[[1]]
unlist(ages)
source('~/Desktop/Cap_Stone/test2.R', echo=TRUE)
ages <- str_extract_all(df$results2, "\\(?[0-9,.]+\\)?")
ages[1]
ages[2]
unlist(ages)
ages <- unlist(str_extract_all(df$results2, "\\(?[0-9,.]+\\)?"))
as.data.frame(ages)
mean(ages)
mean(as.numeric(ages))
sex <- unlist(str_extract_all(df$results2, "\\(?[M,F]+\\)?"))
df <- cbind(as.data.frame(results), ages, sex, results3)
View(df)
user_names <- xpathSApply(res, "//*/a[@class='fl-member-card__user']/text()", xmlValue)
df <- cbind(as.data.frame(user_names), ages, sex, results3)
View(df)
user_name <- xpathSApply(res, "//*/a[@class='fl-member-card__user']/text()", xmlValue)
age <- unlist(str_extract_all(df$results2, "\\(?[0-9,.]+\\)?"))
city <- xpathSApply(res, "//*/span[@class='fl-member-card__location']/text()", xmlValue)
df <- cbind(as.data.frame(user_names), ages, sex, city)
View(df)
View(df)
hist(df$ages)
hist(as.numeric(df$ages))
as.numeric(df$ages)
df$ages
df$ages[1]
as.numeric(df$ages[1])
class(df$ages[1])
as.character(df$ages[1])
as.numeric(as.character(df$ages[1]))
hist(as.numeric(as.character(df$ages)))
library(rvest)
url <- http://www.dcnyhistory.org/joyce/cenmid19.html
census <- url %>%
html() %>%
html_nodes(xpath='/html/body/table/tbody/tr/td/table') %>%
html_table()
url <- http://www.dcnyhistory.org/joyce/cenmid19.html
url <- 'http://www.dcnyhistory.org/joyce/cenmid19.html'
census <- url %>%
read_html() %>%
html_nodes(xpath='/html/body/table/tbody/tr/td/table') %>%
html_table()
census
census[[1]]
census <- url %>%
html() %>%
html_nodes(xpath='/html/body/table/tbody/tr/td/table') %>%
html_table()
data("Titanic")
head(Titanic)
Titanic
Titanic[1]
Titanic
class(Titanic)
Titanic[[1]]
install.packages("titanic")
library(titanic)
head(titanic_test)
str(titanic_test)
head(titanic_train)
str(titanic_train)
make_factors <- c("PassengerID", "Survived", "Pclass", "Sex", "cabin", "Embarked")
for(i in make_factors){
titanic_train$i <- factor(titanic_train$i)
}
for(i in make_factors){
titanic_train[, i] <- factor(titanic_train[, i])
}
titanic_train$PassengerId <- factor(titanic_train$PassengerId)
library(dplyr)
train <- titanic_train %>%
mutate_each_(funs(factor), make_factors)
make_factors <- c("PassengerId", "Survived", "Pclass", "Sex", "cabin", "Embarked")
train <- titanic_train %>%
mutate_each_(funs(factor), make_factors)
make_factors <- c("PassengerId", "Survived", "Pclass", "Sex", "Cabin", "Embarked")
train <- titanic_train %>%
mutate_each_(funs(factor), make_factors)
str(train)
library(ggplot2)
summarise(train)
summary(train)
ggplot(train, aes(x = Age)) +
geom_histogram()
ggplot(train, aes(x = SibSp)) +
geom_histogram()
source('~/.active-rstudio-document', echo=TRUE)
ggplot(train, aes(x = Survived, fill = Sex)) +
geom_bar()
hist(train$Age)
hist(train$Age, bins = 10)
hist(train$Age, binwidth = 10)
hist(train$Age)
hist(train$Age, breaks = 10)
hist(train$Age, breaks = 20)
train <- titanic_train %>%
mutate_each_(funs(factor), make_factors) %>%
mutate(AgeGroup = ifelse(Age <= 15, "Kid",
ifelse(Age > 15 & Age <= 40, "Adult", "Older Adult")))
str(train)
train <- titanic_train %>%
mutate_each_(funs(factor), make_factors) %>%
mutate(AgeGroup = ifelse(Age <= 15, "Kid",
ifelse(Age > 15 & Age <= 40, "Adult", "Older Adult"))) %>%
mutate(AgeGroup = factor(AgeGroup))
str(train)
ggplot(train, aes(x = Survived, fill = Sex)) +
geom_bar()
ggplot(train, aes(x = Survived, fill = AgeGroup)) +
geom_bar()
ggplot(train, aes(x = Survived, y = AgeGroup)) +
geom_point()
ggplot(train, aes(x = Survived, y = Age)) +
geom_point()
ggplot(train, aes(x = Survived, y = Age)) +
geom_boxplot()
ggplot(train, aes(x = Survived, fill = AgeGroup)) +
geom_bar()
ggplot(train, aes(x = Survived, fill = Sex)) +
geom_bar() +
facet_wrap(~AgeGroup)
ggplot(train, aes(x = Survived, fill = AgeGroup)) +
geom_bar() +
facet_wrap(~Sex)
summary(train$AgeGroup)
hist(subset(train, train$AgeGroup == "Kid"))
hist(subset(train, train$AgeGroup == "Kid")$Age)
hist(train$Age, breaks = 20)
abline(h = dnorm(train$Age, mean = mean(train$Age), sd = sd(train$Age)))
abline(dnorm(train$Age, mean = mean(train$Age), sd = sd(train$Age)))
library(titanic)
data("titanic_train")
library(ggplot2)
library(dplyr)
install.packages('broom')
library(broom)
library(rpart)
title: "Predicting Survival on the Titanic"
library(titanic)
train_df <- data("titanic_train")
t <- data("titanic_train")
library(dplyr)
var_names <- names(train_df)
var_factors <- c(var_names[1:3], var_names[5], var_names[11:12])
train_df <- titanic_train
var_names <- names(train_df)
var_factors <- c(var_names[1:3], var_names[5], var_names[11:12])
train_df <- train_df %>%
mutate_each_(funs(factor), var_factors)
glimpse(train_df)
library(ggplot2)
ggplot(train_df, aes(x = Pclass, fill = Survived)) +
geom_histogram(stat = "count", position = "fill")
ggplot(train_df, aes(x = Sex, fill = Survived)) +
geom_histogram(stat = "count", position = "fill")
ggplot(train_df, aes(x = Embarked, fill = Survived)) +
geom_histogram(stat = "count", position = "fill")
par(mfrow = c(1, 3))
ggplot(train_df, aes(x = Pclass, fill = Survived)) +
geom_histogram(stat = "count", position = "fill")
ggplot(train_df, aes(x = Sex, fill = Survived)) +
geom_histogram(stat = "count", position = "fill")
ggplot(train_df, aes(x = Embarked, fill = Survived)) +
geom_histogram(stat = "count", position = "fill")
library(gridExtra)
library(titanic)
train_df <- titanic_train
str(train_df)
library(dplyr)
var_names <- names(train_df)
var_factors <- c(var_names[1:3], var_names[5], var_names[11:12])
train_df <- train_df %>%
mutate_each_(funs(factor), var_factors)
str(train_df)
library(ggplot2)
library(gridExtra)
plot_1 <- ggplot(train_df, aes(x = Pclass, fill = Survived)) +
geom_histogram(stat = "count", position = "fill")
plot_2 <- ggplot(train_df, aes(x = Sex, fill = Survived)) +
geom_histogram(stat = "count", position = "fill")
plot_3 <- ggplot(train_df, aes(x = Embarked, fill = Survived)) +
geom_histogram(stat = "count", position = "fill")
return(plot_1)
plot_1
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
dev.off()
source('~/.active-rstudio-document', echo=TRUE)
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
source('~/.active-rstudio-document', echo=TRUE)
install.packages("ggplot2")
library(ggplot2)
source('~/.active-rstudio-document', echo=TRUE)
plot_1
plot_2
ggplot(train_df, aes(x = Pclass, fill = Survived)) +
geom_histogram(stat = "count", position = "fill")
dev.off()
ggplot(train_df, aes(x = Pclass, fill = Survived)) +
geom_histogram(stat = "count", position = "fill")
dev.off()
dev.off()
View(train_df)
str(train_df)
var_names <- names(train_df)
var_factors <- c(var_names[1:3], var_names[5], var_names[11:12])
train_df <- train_df %>%
mutate_each_(funs(factor), var_factors)
library(dplyr)
var_names <- names(train_df)
var_factors <- c(var_names[1:3], var_names[5], var_names[11:12])
train_df <- train_df %>%
mutate_each_(funs(factor), var_factors)
str(train_df)
ggplot(train_df, aes(x = Pclass, fill = Survived)) +
geom_histogram(stat = "count", position = "fill")
plot_1
ggplot(train_df, aes(x = Pclass, fill = Survived)) +
geom_histogram(stat = "count", position = "fill")
R.Version()
update.packages()
model_1 <- lm(mpg ~ dsp + wt, data = mtcars)
model_1 <- lm(mpg ~ disp + wt, data = mtcars)
model_1
summary(model_1)
model_1 <- lm(mpg ~ log(disp) + wt, data = mtcars)
summary(model_1)
model_1 <- lm(mpg ~ log(disp) + log(wt), data = mtcars)
summary(model_1)
model_1 <- lm(log(mpg) ~ log(disp) + log(wt), data = mtcars)
summary(model_1)
model_1 <- lm(mpg ~ log(disp) + lot(hp) + log(wt), data = mtcars)
model_1 <- lm(mpg ~ log(disp) + log(hp) + log(wt), data = mtcars)
summary(model_1)
model_1 <- lm(mpg ~ log(disp) * log(hp) + log(wt), data = mtcars)
summary(model_1)
log(3)
exp(1.098612)
model_5 <- lm(log(mpg) ~ cyl + log(disp) * log(hp) * log(wt) * drat + vs + am + gear + carb, data = mtcars)
prediction_5 <- predict(model_5, newdata = mtcars)
prediction_5
prediction_5[1]
signif(prediction_5[1], digits = 10)
round(prediction_5[1], digits = 10)
site1 = c(.40, 500) # pink
site2 = c(.30, 550) # black
abtestfunc <- function(ad1, ad2){
sterror1 = sqrt( ad1[1] * (1-ad1[1]) / ad1[2] )
sterror2 = sqrt( ad2[1] * (1-ad2[1]) / ad2[2] )
minmax1 = c((ad1[1] - 1.28*sterror1) * 100, (ad1[1] + 1.28*sterror1) * 100)
minmax2 = c((ad2[1] - 1.28*sterror2) * 100, (ad2[1] + 1.28*sterror2) * 100)
print( round(minmax1,2) )
print( round(minmax2,2) )
}
abtestfunc(site1, site2)
getwd()
setwd("~/Desktop/Oee_for_3D_Printers")
getwd()
bese_url <- "https://GukmlPqxC9D2219fgeGW2Z737i1Tk0yg:21g879CQQCPh8iX2qk9uZAbQ228NP9Q6@orders-db.voodoomfg.com"
library(BotUtilz)
library(jsonlite)
url <- paste0(base_url, may_quary)
base_url <- "https://GukmlPqxC9D2219fgeGW2Z737i1Tk0yg:21g879CQQCPh8iX2qk9uZAbQ228NP9Q6@orders-db.voodoomfg.com"
may_quary <- "/jobs?started_at=gte.2017-05-01"
url <- paste0(base_url, may_quary)
df <- fromJSON(url)
